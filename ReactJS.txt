https://reactjs.org/docs/hello-world.html
https://www.w3schools.com/REACT/default.asp
https://reactjs.org/tutorial/tutorial.html


What is React?
React is a JavaScript library created by Facebook for building user interfaces.
React is used to build Single Page Applications(SPA) as well as to create reusable UI components.
It’s a component-based JavaScript library that renders smartly and can seriously simplify your work.

How does React work?
React creates a VIRTUAL DOM in memory.
Instead of manipulating the browser's DOM directly, React creates a virtual DOM in memory, 
where it does all the necessary manipulating, before making the changes in the browser DOM.
React only changes what needs to be changed!

React Getting Started
To use React in Production, you need NPM and NodeJS

Setting up a React Environment
PreRequisites: NPM and NodeJS
Basic knowledge of HTML, CSS and JavaScript

React uses ES6 and JSX
ES6 stands for ECMAScript 6.
ECMAScript was created to standardize JavaScript, and ES6 is the 6th version of ECMAScript.

JSX stands for JavaScript XML.
JSX produces React "elements". (Rendering elements to the DOM)
JSX allows us to write HTML in React and it makes easier to add HTML elements in React.
JSX converts HTML tags into React elements.
It is not mendatory to use JSX but it makes easier to write React applications.
JSX follows XML rules, and therefore it will throw an error if the HTML is not correct, 
or if the HTML misses a parent element.
JSX is an extension of the JavaScript language based on ES6, and 
is translated into regular JavaScript at runtime.

With JSX,
const myelement = <h1>I Love JSX!</h1>;

ReactDOM.render(myelement, document.getElementById('root'));

Without JSX,
const myelement = React.createElement('h1', {}, 'I do not use JSX!');

ReactDOM.render(myelement, document.getElementById('root'));

If you have NPM and Node.js installed, you can create a React application by 
first installing the create-react-app.
Install create-react-app by running this command in your terminal:
C:\Users\Your Name>npm install -g create-react-app

You are now ready to create your first React application!
Run this command to create a React application named myfirstreact:
C:\Users\Your Name>npx create-react-app myfirstreact

The create-react-app will set up ev
erything you need to run a React application.
It will Install everything - react, react-dom and react-scripts with cra-templates.


Run the React Application
Basic commands:
  npm start
    Starts the development server.

  npm run build
    Bundles the app into static files for production.

  npm test
    Starts the test runner.

  npm run eject
    Removes this tool and copies build dependencies, configuration files
    and scripts into the app directory. If you do this, you can’t go back!


Run this command to move to the myfirstreact directory:
C:\Users\Your Name>cd myfirstreact
Run this command to execute the React application myfirstreact:
C:\Users\Your Name\myfirstreact>npm start
A new browser window will pop up with your newly created React App! 
If not, open your browser and type localhost:3000 in the address bar.

=============================================================================
Rendering Elements:
Elements are the smallest building blocks of React apps.
An element describes what you want to see on the screen.
"Elements" are what "components" are “made of”.

<div id="root"></div>
We call this a “root” DOM node because everything inside it will be managed by React DOM.

Applications built with just React usually have a single root DOM node. 
If you are integrating React into an existing app, you may have as many isolated root DOM nodes as you like.
To render a React element into a root DOM node, pass both to ReactDOM.render():

const element = <h1>Hello, world</h1>;
ReactDOM.render(element, document.getElementById('root'));

Updating the Rendered Element
React elements are immutable. Once you create an element, you can’t change its children or attributes. 
An element is like a single frame in a movie: it represents the UI at a certain point in time.

The only way to update the UI is to create a new element, and pass it to ReactDOM.render().
======================================================================================
ES6
1. We define variables with let and const statements. For the purposes of the React documentation, 
you can consider them equivalent to var.
2. We use the class keyword to define JavaScript classes. There are two things worth remembering about them. 
Firstly, unlike with objects, you don't need to put commas between class method definitions. 
Secondly, unlike many other languages with classes, in JavaScript the value of this in a method depends on how it is called.
3. We sometimes use => to define "arrow functions". They're like regular functions, but shorter. 
For example, x => x * 2 is roughly equivalent to function(x) { return x * 2; }. 
Importantly, arrow functions don't have their own this value so they're handy 
when you want to preserve the this value from an outer method definition.
=========================================================================================

React components
Components are independent and reusable bits of code. They serve the same purpose as JavaScript functions, 
but work in isolation and returns HTML via a render function.

Components come in two types, Class components and Function components.

Create a Class Component
When creating a React component, the component's name must start with an upper case letter.

The component has to include the extends React.Component statement, 
this statement creates an inheritance to React.Component, and gives your component access to React.Component's functions.

The component also requires a render() method, this method returns HTML.

Components in Components
We can refer to components inside other components:


Components in Files
React is all about re-using code, and it can be smart to insert some of your components in separate files.

To do that, create a new file with a .js file extension and put the code inside it:

Note that the file must start by importing React (as before), 
and it has to end with the statement "export default Car;".

To be able to use the Car component, you have to import the file in your application. 
import Car from './App.js'; (or any filename where you have created Car component)

ReactDOM.render(<Car />, document.getElementById('root'));
==========================================================================================

React Props
React Props are like function arguments in JavaScript and attributes in HTML.

To send props into a component, use the same syntax as HTML attributes:
eg. Add a "brand" attribute to the Car element:

const myelement = <Car brand="Ford" />;

The component receives the argument as a props object:
return <h2>I am a {this.props.brand}!</h1>;

You can call class component by attribute, by variable or by calling an object as well.

===============================================================================================
React State
React components has a built-in state object.

The state object is where you store property values that belongs to the component.

When the state object changes, the component re-renders.

Refer to the state object anywhere in the component by using the this.state.propertyname syntax.

To change a value in the state object, use the this.setState() method.
When a value in the state object changes, the component will re-render, 
meaning that the output will change according to the new value(s).

Always use the setState() method to change the state object, 
it will ensure that the component knows its been updated and calls the render() method (and all the other lifecycle methods).

=================================================================================================
Reaact Lifecycle
Lifecycle of Components
Each component in React has a lifecycle which you can monitor and manipulate during its three main phases.

The three phases are: Mounting, Updating, and Unmounting.

Mounting
Mounting means putting elements into the DOM.

React has four built-in methods that gets called, in this order, when mounting a component:

1. constructor()
2. getDerivedStateFromProps()
3. render()
4. componentDidMount()

The render() method is required and will always be called, the others are optional and will be called if you define them.

constructor
The constructor() method is called before anything else, when the component is initiated, 
and it is the natural place to set up the initial state and other initial values.

The constructor() method is called with the props, as arguments, and you should always start by calling the super(props) before anything else, 
this will initiate the parent's constructor method and allows the component to inherit methods from its parent (React.Component).
